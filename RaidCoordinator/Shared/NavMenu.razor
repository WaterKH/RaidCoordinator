<div class="top-row pl-4 navbar navbar-dark">
    <a class="navbar-brand" href="">RaidCoordinator</a>
    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <ul class="nav flex-column">
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="raiderdashboard">
                <span class="oi oi-list-rich" aria-hidden="true"></span> Raid Dashboard
            </NavLink>
        </li>
    </ul>
    
    @if (this.Boosters.Count > 0)
    {
        <div class="@NavMenuCssClass sidebar-add">
            <table class="table table-dark">
                <thead>
                <tr>
                    <th>Username</th>
                    <th>Boosted At</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var booster in this.Boosters)
                {
                    <tr>
                        <td>@booster.Name</td>
                        <td>@booster.BoostedAt.ToLocalTime().ToShortTimeString()</td>
                    </tr>
                }
                </tbody>
            </table>
        </div>
    }
</div>

@code {
    [CascadingParameter(Name = "RaidManagerParent")]
    public RaidManager RaidManagerNav { get; set; }

    public List<Booster> Boosters = new List<Booster>();

    private bool collapseNavMenu = true;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    protected override async Task OnInitializedAsync()
    {
        this.RaidManagerNav.OnBoostersAdded += this.BoostersAdded;
    }

    private async void BoostersAdded(object sender, BoostersAddedEventArgs args)
    {
        if(args == null)
            Boosters.Clear();
        else if (this.Boosters.FirstOrDefault(x => x.Name == args.Value.Name) == null)
            this.Boosters.Add(args.Value);

        await InvokeAsync(() =>
        {
            base.StateHasChanged();
        });
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
}
